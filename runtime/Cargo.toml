[package]
name = "xorion-runtime"
description = "Xorion runtime built with Substrate, part of Xorion Sdk."
version = "0.1.0"
license = "Unlicense"
authors.workspace = true
homepage.workspace = true
repository.workspace = true
edition.workspace = true
publish = false

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
codec = { features = ["derive"], workspace = true }
frame-benchmarking = { optional = true, workspace = true }
frame-executive.workspace = true
frame-metadata-hash-extension.workspace = true
frame-support = { features = ["experimental"], workspace = true }
frame-system-benchmarking = { optional = true, workspace = true }
frame-system-rpc-runtime-api.workspace = true
frame-election-provider-support.workspace = true
frame-system.workspace = true
frame-try-runtime = { optional = true, workspace = true }
pallet-authority-discovery.workspace = true
pallet-babe.workspace = true
pallet-contracts.workspace = true
pallet-insecure-randomness-collective-flip.workspace = true
pallet-bridge.workspace = true
pallet-session.workspace = true
pallet-authorship.workspace = true
pallet-staking.workspace = true
pallet-bags-list.workspace = true
pallet-offences.workspace = true
pallet-balances.workspace = true
pallet-grandpa.workspace = true
pallet-sudo.workspace = true
pallet-airdrop.workspace = true
pallet-private-transactions.workspace = true
pallet-airdrop-rpc-api.workspace = true
pallet-mmr.workspace = true
pallet-statement.workspace = true
pallet-timestamp.workspace = true
pallet-transaction-payment-rpc-runtime-api.workspace = true
pallet-transaction-payment.workspace = true
pallet-election-provider-multi-phase.workspace = true
pallet-nomination-pools.workspace = true
pallet-delegated-staking.workspace = true
scale-info = { features = ["derive", "serde"], workspace = true }
serde_json = { workspace = true, default-features = false, features = ["alloc"] }
sp-authority-discovery.workspace = true
sp-api.workspace = true
sp-block-builder.workspace = true
sp-consensus-babe = { features = ["serde"], workspace = true }
sp-consensus-grandpa = { features = ["serde"], workspace = true }
sp-core = { features = ["serde"], workspace = true }
sp-genesis-builder.workspace = true
sp-inherents.workspace = true
sp-keyring.workspace = true
sp-offchain.workspace = true
sp-runtime = { features = ["serde"], workspace = true }
sp-session.workspace = true
sp-staking.workspace = true
sp-storage.workspace = true
sp-statement-store.workspace = true
sp-transaction-pool.workspace = true
sp-version = { features = ["serde"], workspace = true }
log = "0.4.27"
hex = { version = "0.4.3", default-features = false }


[build-dependencies]
substrate-wasm-builder = { optional = true, workspace = true, default-features = true }

[features]
default = ["std"]
std = [
    "codec/std",
    "frame-benchmarking?/std",
    "frame-executive/std",
    "frame-metadata-hash-extension/std",
    "frame-support/std",
    "frame-system-benchmarking?/std",
    "frame-system-rpc-runtime-api/std",
    "frame-system/std",
    "frame-election-provider-support/std",
    "frame-try-runtime?/std",
    "pallet-authority-discovery/std",
    "pallet-babe/std",
    "pallet-session/std",
    "pallet-authorship/std",
    "pallet-bags-list/std",
    "pallet-offences/std",
    "pallet-staking/std",
    "pallet-balances/std",
    "pallet-contracts/std",
    "pallet-insecure-randomness-collective-flip/std",
    "pallet-grandpa/std",
    "pallet-sudo/std",
    "pallet-airdrop/std",
    "pallet-bridge/std",
    "pallet-private-transactions/std",
    "pallet-airdrop-rpc-api/std",
    "pallet-timestamp/std",
    "pallet-transaction-payment-rpc-runtime-api/std",
    "pallet-transaction-payment/std",
    "pallet-election-provider-multi-phase/std",
    "pallet-nomination-pools/std",
    "pallet-delegated-staking/std",
    "pallet-mmr/std",
    "pallet-statement/std",
    "scale-info/std",
    "serde_json/std",
    "sp-api/std",
    "sp-authority-discovery/std",
    "sp-block-builder/std",
    "sp-consensus-babe/std",
    "sp-staking/std",
    "sp-statement-store/std",
    "sp-consensus-grandpa/std",
    "sp-core/std",
    "sp-genesis-builder/std",
    "sp-inherents/std",
    "sp-keyring/std",
    "sp-offchain/std",
    "sp-runtime/std",
    "sp-session/std",
    "sp-storage/std",
    "sp-transaction-pool/std",
    "sp-version/std",
    "substrate-wasm-builder",
    "hex/std"
]

runtime-benchmarks = [
    "frame-benchmarking/runtime-benchmarks",
    "frame-support/runtime-benchmarks",
    "frame-system-benchmarking/runtime-benchmarks",
    "frame-system/runtime-benchmarks",
    "pallet-balances/runtime-benchmarks",
    "pallet-grandpa/runtime-benchmarks",
    "pallet-sudo/runtime-benchmarks",
    "pallet-airdrop/runtime-benchmarks",
    "pallet-timestamp/runtime-benchmarks",
    "pallet-transaction-payment/runtime-benchmarks",
    "sp-runtime/runtime-benchmarks",
]

try-runtime = [
    "frame-executive/try-runtime",
    "frame-support/try-runtime",
    "frame-system/try-runtime",
    "frame-try-runtime/try-runtime",
    "pallet-babe/try-runtime",
    "pallet-session/try-runtime",
    "pallet-bags-list/try-runtime",
    "pallet-offences/try-runtime",
    "pallet-staking/try-runtime",
    "pallet-balances/try-runtime",
    "pallet-grandpa/try-runtime",
    "pallet-sudo/try-runtime",
    "pallet-airdrop/try-runtime",
    "pallet-timestamp/try-runtime",
    "pallet-transaction-payment/try-runtime",
    "sp-runtime/try-runtime",
]

# Enable the metadata hash generation.
#
# This is hidden behind a feature because it increases the compile time.
# The wasm binary needs to be compiled twice, once to fetch the metadata,
# generate the metadata hash and then a second time with the
# `RUNTIME_METADATA_HASH` environment variable set for the `CheckMetadataHash`
# extension.
metadata-hash = ["substrate-wasm-builder/metadata-hash"]

# A convenience feature for enabling things when doing a build
# for an on-chain release.
on-chain-release-build = ["metadata-hash", "sp-api/disable-logging"]

fast-runtime = []